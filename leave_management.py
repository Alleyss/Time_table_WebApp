import streamlit as st
from database import fetch_data, update_data, fetch_one
import datetime
from gemini_ai import generate_substitute_timetable_llm, apply_substitute_timetable
import pandas as pd

def render_page():
    st.subheader("Teacher Leave Requests")

    leave_requests = fetch_data("SELECT lr.leave_id, u.name, lr.start_date, lr.end_date, lr.reason, lr.status, lr.teacher_id "
                                "FROM leave_requests lr JOIN users u ON lr.teacher_id = u.user_id")

    if leave_requests:
        df_data = []
        for request in leave_requests:
            df_data.append({
                "Leave ID": request[0],
                "Teacher Name": request[1],
                "Start Date": request[2],
                "End Date": request[3],
                "Reason": request[4],
                "Status": request[5],
                "Teacher ID": request[6]
            })
        st.dataframe(pd.DataFrame(df_data))

        st.subheader("Manage Leave Requests")
        pending_requests = [req for req in leave_requests if req[5] == 'Pending']
        selected_leave_id = st.selectbox("Select Pending Leave Request to Manage", [req[0] for req in pending_requests] if pending_requests else [], index=None)

        if selected_leave_id:
            leave_details = fetch_one("SELECT lr.start_date, lr.end_date, lr.teacher_id FROM leave_requests lr WHERE lr.leave_id = ?", (selected_leave_id,))
            if leave_details:
                start_date_str, end_date_str, absent_teacher_id = leave_details

                col1, col2, col3 = st.columns(3)
                if col1.button("Approve"):
                    update_data("leave_requests", {"status": "Approved"}, "leave_id = ?", (selected_leave_id,))
                    st.success(f"Leave request {selected_leave_id} approved.")
                    st.rerun()  # Refresh the page to update the table

                if col2.button("Decline"):
                    update_data("leave_requests", {"status": "Declined"}, "leave_id = ?", (selected_leave_id,))
                    st.warning(f"Leave request {selected_leave_id} declined.")
                    st.rerun()  # Refresh the page to update the table

                if col3.button("Generate Substitute Timetable"):
                    with st.spinner("Generating Substitute Timetable..."):
                        new_timetable_json = generate_substitute_timetable_llm(selected_leave_id)
                        if new_timetable_json:
                            apply_substitute_timetable(new_timetable_json, absent_teacher_id)
                            st.success("Timetable updated with substitutions generated by LLM.")
                        else:
                            st.error("Failed to generate substitute timetable using LLM.")
                        st.rerun()

    else:
        st.info("No leave requests found.")